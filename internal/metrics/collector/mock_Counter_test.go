// Code generated by mockery v2.53.3. DO NOT EDIT.

package collector

import mock "github.com/stretchr/testify/mock"

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// Inc provides a mock function with no fields
func (_m *MockCounter) Inc() {
	_m.Called()
}

// MockCounter_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type MockCounter_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
func (_e *MockCounter_Expecter) Inc() *MockCounter_Inc_Call {
	return &MockCounter_Inc_Call{Call: _e.mock.On("Inc")}
}

func (_c *MockCounter_Inc_Call) Run(run func()) *MockCounter_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounter_Inc_Call) Return() *MockCounter_Inc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCounter_Inc_Call) RunAndReturn(run func()) *MockCounter_Inc_Call {
	_c.Run(run)
	return _c
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
