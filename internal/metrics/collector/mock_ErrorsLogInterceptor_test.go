// Code generated by mockery v2.44.2. DO NOT EDIT.

package collector

import "github.com/stretchr/testify/mock"

// MockErrorsLogInterceptor is an autogenerated mock type for the ErrorsLogInterceptor type
type MockErrorsLogInterceptor struct {
	mock.Mock
}

type MockErrorsLogInterceptor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorsLogInterceptor) EXPECT() *MockErrorsLogInterceptor_Expecter {
	return &MockErrorsLogInterceptor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: err
func (_m *MockErrorsLogInterceptor) Execute(err error) {
	_m.Called(err)
}

// MockErrorsLogInterceptor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockErrorsLogInterceptor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - err error
func (_e *MockErrorsLogInterceptor_Expecter) Execute(err interface{}) *MockErrorsLogInterceptor_Execute_Call {
	return &MockErrorsLogInterceptor_Execute_Call{Call: _e.mock.On("Execute", err)}
}

func (_c *MockErrorsLogInterceptor_Execute_Call) Run(run func(err error)) *MockErrorsLogInterceptor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockErrorsLogInterceptor_Execute_Call) Return() *MockErrorsLogInterceptor_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorsLogInterceptor_Execute_Call) RunAndReturn(run func(error)) *MockErrorsLogInterceptor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorsLogInterceptor creates a new instance of MockErrorsLogInterceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorsLogInterceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorsLogInterceptor {
	mock := &MockErrorsLogInterceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
