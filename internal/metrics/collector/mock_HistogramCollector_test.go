// Code generated by mockery v2.44.2. DO NOT EDIT.

package collector

import (
	"github.com/stretchr/testify/mock"
)

// MockHistogramCollector is an autogenerated mock type for the HistogramCollector type
type MockHistogramCollector struct {
	mock.Mock
}

type MockHistogramCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistogramCollector) EXPECT() *MockHistogramCollector_Expecter {
	return &MockHistogramCollector_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: labels
func (_m *MockHistogramCollector) Execute(labels ...string) (Histogram, error) {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Histogram
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (Histogram, error)); ok {
		return rf(labels...)
	}
	if rf, ok := ret.Get(0).(func(...string) Histogram); ok {
		r0 = rf(labels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Histogram)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(labels...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistogramCollector_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHistogramCollector_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - labels ...string
func (_e *MockHistogramCollector_Expecter) Execute(labels ...interface{}) *MockHistogramCollector_Execute_Call {
	return &MockHistogramCollector_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{}, labels...)...)}
}

func (_c *MockHistogramCollector_Execute_Call) Run(run func(labels ...string)) *MockHistogramCollector_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockHistogramCollector_Execute_Call) Return(_a0 Histogram, _a1 error) *MockHistogramCollector_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistogramCollector_Execute_Call) RunAndReturn(run func(...string) (Histogram, error)) *MockHistogramCollector_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistogramCollector creates a new instance of MockHistogramCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistogramCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistogramCollector {
	mock := &MockHistogramCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
