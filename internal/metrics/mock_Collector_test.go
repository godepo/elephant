// Code generated by mockery v2.44.2. DO NOT EDIT.

package metrics

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCollector is an autogenerated mock type for the Collector type
type MockCollector struct {
	mock.Mock
}

type MockCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollector) EXPECT() *MockCollector_Expecter {
	return &MockCollector_Expecter{mock: &_m.Mock}
}

// TrackQueryMetrics provides a mock function with given fields: ctx, begin, err
func (_m *MockCollector) TrackQueryMetrics(ctx context.Context, begin time.Time, err error) {
	_m.Called(ctx, begin, err)
}

// MockCollector_TrackQueryMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackQueryMetrics'
type MockCollector_TrackQueryMetrics_Call struct {
	*mock.Call
}

// TrackQueryMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - begin time.Time
//   - err error
func (_e *MockCollector_Expecter) TrackQueryMetrics(ctx interface{}, begin interface{}, err interface{}) *MockCollector_TrackQueryMetrics_Call {
	return &MockCollector_TrackQueryMetrics_Call{Call: _e.mock.On("TrackQueryMetrics", ctx, begin, err)}
}

func (_c *MockCollector_TrackQueryMetrics_Call) Run(run func(ctx context.Context, begin time.Time, err error)) *MockCollector_TrackQueryMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(error))
	})
	return _c
}

func (_c *MockCollector_TrackQueryMetrics_Call) Return() *MockCollector_TrackQueryMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_TrackQueryMetrics_Call) RunAndReturn(run func(context.Context, time.Time, error)) *MockCollector_TrackQueryMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollector creates a new instance of MockCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollector {
	mock := &MockCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
